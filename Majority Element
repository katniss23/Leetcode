169. Majority Element using Boyer-Moore's voting algorithm
#https://leetcode.com/problems/majority-element/description/
BETTER SOLUTION:
class Solution {
    public int majorityElement(int[] nums) {
        HashMap<Integer,Integer> mpp = new HashMap<>();
        for(int i =0;i<nums.length;i++){
            int value = mpp.getOrDefault(nums[i],0);
            value++;
            mpp.put(nums[i],value);
        }
        for(Map.Entry<Integer,Integer> it :mpp.entrySet()){
            if(it.getValue() > (nums.length/2)){
                return it.getKey();
            }
        }
        return -1;
}
}
OPTIMAL SOLUTION:
class Solution {
    public int majorityElement(int[] nums) {
        int count =0, candidate =0;
        for(int i =0;i<nums.length;i++){
            if(count == 0){
                count =1;
                candidate = nums[i];
            }else{
                if(candidate == nums[i]){
                    count ++;
                }else{
                    count --;
                }
            }
        }
count =0;
        for(int i =0;i<nums.length;i++){
            if(candidate == nums[i]){
                count ++;
            }
            if(count>(nums.length/2)){
                return candidate;
            }

        }
        return -1;
    }
}
