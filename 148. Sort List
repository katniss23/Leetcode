/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
    
class Solution {
    public ListNode sortList(ListNode head){
        if(head == null || head.next == null){
            return head;
        }
        ListNode fast = head,slow = head,prev =null;
        while(fast != null && fast.next!=null){
            fast = fast.next.next;
            prev = slow;
            slow =  slow.next;
        }
        prev.next = null;
        ListNode leftHead = null, rightHead = null;
        leftHead = sortList(head);
        rightHead = sortList(slow);
        return merge(leftHead,rightHead);
    }
    public ListNode merge(ListNode left,ListNode right){
        ListNode temp= new ListNode(-1),newHead =temp;
        if(left == null){return right;}
        if(right == null){return left;}
        
        while(left != null && right != null){
            if(left.val <= right.val){
                temp.next = left;
                left = left.next;
            }
            else{
                temp.next = right;
                right = right.next;
            }
            temp =temp.next;
        }
        if(left!=null){temp.next = left;}
        else{temp.next = right;}
    return newHead.next;    
    }
   

}
