class Solution {
    public int[] searchRange(int[] nums, int target) {
        int n = nums.length;
        int firstOccurrence = LowerBound(nums, target, n);
        if (firstOccurrence == n || nums[firstOccurrence] != target) {
            return new int[]{-1, -1};
        }
        int lastOccurrence = UpperBound(nums, target, n);
        if (lastOccurrence > 0 && nums[lastOccurrence - 1] == target) {
            return new int[]{firstOccurrence, lastOccurrence - 1};
        } else {
            return new int[]{firstOccurrence, firstOccurrence};
        }
    }

    int LowerBound(int[] a, int target, int n) {
        int l = 0, ans = 0, u = n - 1, m = 0;
        while (l <= u) {
            m = (l + u) / 2;
            if (a[m] >= target) {
                ans = m;
                u = m - 1;
            } else {
                l = m + 1;
            }
        }
        return ans;
    }

    int UpperBound(int[] a, int target, int n) {
        int l = 0, ans = n, u = n - 1, m = 0;
        while (l <= u) {
            m = (l + u) / 2;
            if (a[m] > target) {
                ans = m;
                u = m - 1;
            } else {
                l = m + 1;
            }
        }
        return ans;
    }
}
